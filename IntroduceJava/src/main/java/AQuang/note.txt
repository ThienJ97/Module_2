//định nghĩa 1 đối tượng trung gian để so sánh hình chữ nhật
public class ComparatorRectangeByArea implements Comparator<Rectangle> {
    @Override
    public int compare(Rectangle o1, Rectangle o2) {
        if (o1.getArea() > o2.getArea()) {
            return 1;   // trả về một số lớn hơn 0 thì o1 > 02;
        } else if (o1.getArea() == o2.getArea()) {
            return 0;   // trả về 1 số = 0 thì o1 = o2;
        }else
            return -1;
    }
}

// tạo 1 mảng gồm 5 phần tử và khởi tạo 5 phần tử đó ra
Geometric[] geometrics = new Geometric[5];
        geometrics[0] = new Circle(6);
        geometrics[1] = new Rectangle(6, 4);
        geometrics[2] = new Rectangle(5, 5);
        geometrics[3] = new Circle(6.5f);
        geometrics[4] = new Rectangle(5, 6);

        Comparator comparator = new ComparatorGeometricByArea(); // khoi tạo đối tượng tu lớp ComparatorGeometricByArea()
        Arrays.sort(geometrics, comparator); // sắp xếp đối tượng hình học ở đối tượng vừa khoi tạo
        printArray(geometrics); // in đối tượng ra khi đã sắp xếp
//
        public class Employee implements Comparable<Employee> {
            private String name;
            private int age;
            private float salary;
// ghi đè phương thức equals để so sánh 2 đối  tượng vơi nhau
      @Override
          public boolean equals(Object obj) {
              if (this == obj) {
                  return true;
              }
              if (obj instanceof Employee) {
                  Employee o1 = (Employee) obj;
                  if (this.getName().equals(o1.getName()) && this.getAge() == ((Employee) obj).getAge()
                  && this.getSalary() == ((Employee) obj).getSalary()) {
                      return true;
                  }
              }
              return false;
          }
// ghi đè phương thức hashCode() để so sánh các thuộc tính ở đây là tên,tuôi,lương với nhau
 @Override
    public int hashCode() {
        return Objects.hash(this.age, this.name, this.salary);
    }
// ghi đè phương thức compareTo để so sánh các tuổi với nhau.
@Override
    public int compareTo(Employee o) {
        if (this.age > o.getAge()) {
            return 1;
        } else if (this.age == o.getAge()) {
            return 0;
        }else
            return -1;
    }