git pull origin main
/-----------------------------------------------------------------------------------9/03/23-----------------------------------------------------------------------------------------------\
+Sử dụng vòng lặp:
  1.Cú pháp:
    for (initial-action;loop-continuation-condition;action-after-each-iteration){ 
              statement(s);
    }
  2.vd: in ra bảng cửu chương 5.

 for (int i = 1; i <= 10; i++){
 int product = 5 *i;
 System.out.println("5 x " + i + " = " + product);
 }

+Sử dụng vòng lặp do-while
 1.Cú pháp:

 do {
 statements(s);
 } while (loop-continuation-condition);

 2.vd:• Tính tổng các số nguyên:
• Tính tổng của cácsố được nhập vào từ bàn phím
• Nếu nhập vào số 0 thì kết thúc chương trình

 int sum = 0;
 int number;
 Scanner scanner = new Scanner(System.in);
 do{
 System.out.print("Enter anumber: "); 
 number = scanner.nextInt();
 sum += number;
 } while (number != 0); 
 System.out.println("The sum is: " + sum);

/-----------------------------------------------------------------------------------10/03/23-----------------------------------------------------------------------------------------------\
+Khai báo mảng: 
 ví dụ:
	int [] numbers = new int[5];		// khởi tạo 1 mảng gồm 5 phần tử với giá trị mặt định là 0
	int[] numbers = {1, 7, 5, 1}; 		// khai báo nhanh 1 mảng

+Độ dài mảng: numbers[i]

Bài tập 
BT1: Tính tổng các giá trị trong mảng
BT2: Đếm xem mảng có bao nhiêu số chẵn
BT3: Tìm giá trị nhỏ nhất của mảng
BT4: Thêm phần tử vào mảng
BT5: Xóa phần tử khỏi mảng
BT6: Gộp 2 mảng a, b lại với nhau

+ Lớp Wrapper trong java

Từ J2SE 5.0, tính năng autoboxing và unboxing chuyển đổi kiểu dữ liệu nguyên thủy thành kiểu đối tượng 
và từ đối tượng thành kiểu dữ liệu nguyên thủy một cách tự động. 
Sự chuyển đổi tự động kiểu dữ liệu nguyên thủy thành kiểu đối tượng 
được gọi là autoboxing và ngược lại được gọi là unboxing.

Trong java, có 8 lớp Wrapper chúng được thiết kế trong gói java.lang.
Nguyên Thủy: boolean  char      byte  short   int     long   float   double
                ↓       ↓         ↓     ↓      ↓       ↓      ↓       ↓
Kiểu Wrapper:Boolean  Character Byte  Short  Integer  Long   Float  Double

ví dụ:
public class WrapperExample1 {
    public static void main(String args[]) {
        // Đổi int thành Integer
        int a = 20;
        Integer i = Integer.valueOf(a);  // đổi int thành Integer
        Integer j = a;  // autoboxing, tự động đổi int thành Integer trong nội bộ trình biên dịch
 
        System.out.println(a + " " + i + " " + j);
    }
}

+ Truyền tham trị trong Java

 .Truyền một giá trị cho phương thức, được gọi là truyền tham trị
 .Việc thay đổi giá trị chỉ có hiệu lực trong phương thức được gọi, không có hiệu lực bên ngoài phương thức.

 .Trong Java, truyền tham trị dành cho các tham số có kiểu dữ liệu nguyên thủy: 
   byte, short, int, long, float, double, boolean, char.

+ Truyền tham chiếu trong Java

 .Trong Java, khi gọi một phương thức và truyền một tham chiếu cho phương thức, được gọi là truyền tham chiếu. 
 Việc thay đổi giá trị của biến tham chiếu bên trong phương thức làm thay đổi giá trị của nó.

 .Trong Java, tất các phương thức có tham số là biến có kiểu là các lớp (class) đều là kiểu tham chiếu.


// Scanner dùng để nhập thông tin
public static Scanner scanner = new Scanner(System.in);

// In có xuống dòng
System.out.println();

// Lớp Arrays có phương thức toString dùng để chuyển 1 mảng thành chuỗi
Arrays.toString(a)

// In có format
System.out.printf("%s xin chao", "C1222I1");

//Sao chép 1 mảng gốc thành 1 mảng mới theo 1 độ dài cho trước
Arrays.copyOf(a, a.length + 1);

Với Print: Xuất kết quả ra màn hình nhưng con trỏ chuột không xuống dòng.
Với Println: Xuất kết quả ra màn hình đồng thời con trỏ chuột nhảy xuống dòng tiếp theo.
Với Printf: Xuất ra màng hình kết quả đồng thời có thể định dạng được kết quả đó nhờ vào các đối số thích hợp.

VD:Chẳng hạn như in 2 câu: “Tôi yêu lập trình. Thích Java và uống cafe” hiển thị dưới dạng 2 dòng trên màn hình console.
 + với Print:
public class Print {
    public static void main(String[] args) {
        System.out.print("Tôi yêu lập trình.");
        System.out.print("Thích Java và uống cafe.");
    }
}
 + Với Println:
public class Print {
    public static void main(String[] args) {
        System.out.println("Tôi yêu lập trình.");
        System.out.println("Thích Java và uống cafe.");
    }
}
 + Với Printf:
public class Printf {
    public static void main(String[] args) {
        System.out.printf("%s\n%s", "Tôi yêu lập trình.", "Thích Java và uống cafe.");
    }
}

Các bộ định dạng có sẵn trong Printf:

. %c: Ký tự
vd:
char letter = 'A';
System.out.printf("The letter is %c", letter);//The letter is A

. %d: Số thập phân (số nguyên) (cơ số 10)
vd:
int age = 27;
System.out.printf("I am %d years old", age);//I am 27 years old

. %e: Dấu phẩy động theo cấp số nhân
vd:
double pi = 3.14159265359;
System.out.printf("The value of pi is approximately %e", pi);//The value of pi is approximately 3.141593e+00

. %f: Dấu phẩy động
. %i: Số nguyên (cơ sở 10)
. %o: Số bát phân (cơ sở 8)
. %s: Chuỗi
. %u: Số thập phân (số nguyên) không dấu
. %x: Số trong hệ thập lục phân (cơ sở 16)
. %t: Định dạng ngày / giờ
. %%: Dấu phần trăm
. \%: Dấu phần trăm

/-----------------------------------------------------------------------------------14/03/23-----------------------------------------------------------------------------------------------\
• Từ khoá class được sử dụng để khai báo lớp
+Cú pháp khai báo lớp:

 [public] class TênLớp{
    [các thuộc tính]
    [các phương thức] //hành vi
 }
• Từ khoá new được sử dụng để khởi tạo đối tượng
+Cú pháp:
  <class_name> <object_name> = new <class_name> ();

      Trong đó:
	• class_name là tên của lớp
	• new là từ khoá để khởi tạo đối tượng
	• object_name là tên biến chứa tham chiếu trỏ đến đối tượng.

+Đặc điểm phương thức khởi tạo:

  . Tên phương thức Trùng Với Tên Lớp
  . Không Có kiểu dữ liệu trả về

+cú pháp:
[AccessModifier] TênLớp([ThamSố]);

*Lưu Ý: Nếu trong lớp mà không khai báo phương thức khởi tạo nào thì java nó ngầm định rằng 
nó tạo cho mình 1 phương thức khởi tạo k tham số(và khởi tạo các thuộc tính có giá trị mặc định) 

+Cú pháp khai báo thuộc tính:

[AccessModifier] KieuDuLieu tênThuộcTính;

+Phương thức khởi tạo là phương thức dùng để tạo đối tượng
+Cú pháp khai báo phương thức:

 [AccessModifier] KieuDuLieu tênPhươngThức(ThamSố);

+AccessModifier gồm có private;public;protected;default.

. private : khi khai báo hành vi là private thì phạm vi chỉ trong phương thức đó mà thôi.

. public: khi khai báo hành vi là public thì bất kì ở đâu bên ngoài class có thể truy cập vào phương thức đó.


 + Cách truy xuất các thuộc tính: Sử dụng dấu ( . ) để truy suât đến thuộc tính của đối tượng
                                  VD:Class Car audi = new Car("Back", 4000);
                                      System.out.println("Color is: " + audi.color);
                                      System.out.println("Price is: " + audi.price);

+ Cách gọi phương thức: Sử dụng dấu ( . ) để gọi phương thức
                         VD: int maxSpeed = audi.speed();
                        
+ Getter:là phương thức cho phép lấy về giá trị của thuộc tính
          -Cú pháp khai báo getter:
              public returnType getPropetyName()
          -Đối vs thuộc tính kiểu boolean thì tên getter bắt đầu bằng chữ "is": 
              public boolean isPropertyName()
          

+Setter:là phương thức cho phép thay đổi giá trị của thuộc tính
        -Cú pháp khai báo setter:
            public void setPropertyName(dataType propertyValue)
            
            VD: setter và getter:
            class Person{
                    private Stringname;
                    public void setName(String name){
                    this.name = name;
                    }
                    public String getName(){
                    return this.name;
                    }
                    }
/-----------------------------------------------------------------------------------15/03/23-----------------------------------------------------------------------------------------------\
+Thuộc tính và Phương thức tĩnh(static)
 .Thuộc tính tĩnh và phương thức tĩnh(static) dùng chung cho tất cả đối tượng lớp
 
 . Chúng được gọi sử dụng thông qua tên lớp mà không cần tạo đối tượng.

 . Trong phương thức tĩnh chỉ truy xuất được các thành viên của lớp.

 . Để khai báo thuộc tính hay phương thức tĩnh dùng từ khóa static trước kiểu dữ liệu.

Ví dụ:
class PhanSo {
	private static int soLuongPs = 0;
	
	public static int timUcln (int a, int b) {

	}
}

gọi phương thức timUcln() bằng cách:

int ucln = PhanSo.timUcln(12,8);

+ Phân biệt Private, Public, Protected ở trong Java

 . private : khi khai báo hành vi là private thì phạm vi chỉ trong phương thức đó mà thôi.

 . public: khi khai báo hành vi là public thì bất kì ở đâu bên ngoài class có thể truy cập vào phương thức đó.

 . protected: phạm vi truy cập protected là trong cùng 1 package.

+ Nested class (lớp trong) là một lớp được định nghĩa bên trong một lớp khác. Nó được định nghĩa trong phạm vi của lớp bao bọc bên ngoài 
và có thể truy cập vào các biến thành viên và phương thức của lớp bao bọc.
 .Có hai loại nested class trong Java
  1.Non-static nested class (còn gọi là inner class phi tĩnh): Là lớp được khai báo bên trong một lớp khác và không được khai báo là static.
VD:public class OuterClass {
    private int x;
    
    class InnerClass {
        public void display() {
            System.out.println("The value of x is " + x);
        }
    }
}
 2. Static nested class (còn gọi là inner class tĩnh): Là lớp được khai báo bên trong một lớp khác và được khai báo là static.
VD:public class OuterClass {
    private static int x;
    
    static class InnerClass {
        public void display() {
            System.out.println("The value of x is " + x);
        }
    }
}
/-----------------------------------------------------------------------------------16/03/23-----------------------------------------------------------------------------------------------\
+ Kế thừa là cho phép một lớp con (subclass) được tạo ra từ một lớp cha (superclass) đã tồn tại, và lớp con sẽ thừa hưởng tất cả các thuộc tính và phương thức của lớp cha đó.
ví dụ:
class Animal {
    void move() {
        System.out.println("Con vật đang di chuyển");
    }
}

class Bird extends Animal {
    void move() {
        System.out.println("Con chim đang bay");
    }
}
//Lớp con là Bird, kế thừa phương thức move() của lớp cha Animal, nhưng lại định nghĩa lại phương thức này để biểu diễn hành động di chuyển của chim là bay

+ @Override là việc định nghĩa lại một phương thức đã có trong lớp cha trên lớp con, với nội dung và chức năng khác hơn so với phương thức trong lớp cha
ví dụ:
class Animal {
    void move() {
        System.out.println("Con vật đang di chuyển");
    }
}

class Bird extends Animal {
    @Override
    void move() {
        System.out.println("Con chim đang bay");
    }
}

// "extends" là từ khóa trong Java được sử dụng để kế thừa các thuộc tính và phương thức từ một lớp khác 

+ "Overloading" trong Java là việc định nghĩa lại một phương thức có cùng tên trong cùng một lớp, nhưng với danh sách tham số đầu vào khác nhau

. Các quy tắc của overloading trong Java:

  1. Các phương thức phải có cùng tên.

  2. Các phương thức phải khác nhau về danh sách tham số (số lượng, kiểu dữ liệu hoặc thứ tự).

  3. Các phương thức có thể khác nhau về kiểu trả về.

ví dụ:
class Calculator {
    int add(int x, int y) {
        return x + y;
    }

    double add(double x, double y) {
        return x + y;
    }

    int add(int x, int y, int z) {
        return x + y + z;
    }
}

+ "final" là một từ khóa được sử dụng để chỉ định rằng một biến, một phương thức hoặc một lớp không thể thay đổi giá trị hoặc bị kế thừa.

ví dụ:
final int B = 100;//biến B được khai báo là final, do đó giá trị của nó không thể được thay đổi sau khi đã được gán giá trị ban đầu.

+Trong Java, "toString()" là một phương thức được định nghĩa trong lớp Object, nó trả về một chuỗi biểu diễn đối tượng. 

Phương thức này được sử dụng để cung cấp một chuỗi mô tả đối tượng, phục vụ cho việc hiển thị thông tin của đối tượng ra ngoài cho người dùng hoặc để ghi vào file hoặc cơ sở dữ liệu.

ví dụ:
public class HocSinh {
    private String name;
    private int age;

    public HocSinh(String name, int age) {
        this.name = name;
        this.age = age;
    }

    @Override
    public String toString() {
        return "HocSinh[name=" + name + ", age=" + age + "]";
    }
}

+ Đa hình cho phép một lớp cha có thể có nhiều lớp con khác nhau, và các lớp con đó có thể định nghĩa lại các phương thức của lớp cha để thực hiện các hành động khác nhau.
